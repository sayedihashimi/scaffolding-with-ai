@page "/contacts/delete"
@using Microsoft.EntityFrameworkCore
@using BlazorWebApp01.Models
@inject IDbContextFactory<BlazorWebApp01.Data.BlazorWebApp01Context> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>Contact</h2>
    <hr />
    @if (contact is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Name</dt>
            <dd class="col-sm-10">@contact.Name</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Email</dt>
            <dd class="col-sm-10">@contact.Email</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Phone</dt>
            <dd class="col-sm-10">@contact.Phone</dd>
        </dl>
        <EditForm method="post" Model="contact" OnValidSubmit="DeleteContact" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(contact is null)">Delete</button> |
            <a href="/contacts">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private Contact? contact;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        contact = await context.Contact.FirstOrDefaultAsync(m => m.Id == Id);

        if (contact is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteContact()
    {
        using var context = DbFactory.CreateDbContext();
        context.Contact.Remove(contact!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/contacts");
    }
}
